#!/usr/bin/env bash

set -e

#################################
####### Prepare Variables #######
#################################

# Default cron has limited path and nodetool and
export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

bucket={{ cassandra_backup_s3_bucket }}

base=/mnt/cassandra/data
snaps=snapshots

day_bucket=$(date +"%Y-%m-%d")
time_bucket=$(date +"%H:%M:%S")
sid="$day_bucket-$time_bucket"
host=$(hostname)
backup_base="{{ cassandra_env }}-{{ cassandra_role }}/${day_bucket}/${host}/${time_bucket}"

empty_file=/tmp/empty
done_msg=BACKUP_DONE_SUCCESSFULLY

metrics_dir=/var/lib/node-exporter/textfile-collector
mkdir -p -m 777 $metrics_dir
metrics_file=${metrics_dir}/cassandra_backup.prom
metrics_tmpl='
# TYPE cassandra_backup counter
# HELP cassandra_backup Counts the number of successful backups
cassandra_backup{type="snapshot",errno="%d"} 1 %d

# TYPE cassandra_backup_duration_seconds gauge
# HELP cassandra_backup_duration_seconds Track the duration of the backup task, in seconds
cassandra_backup_duration_seconds{type="snapshot",errno="%s"} %d %d
'

started_at=$(date +%s%3N)

#################################
##### Cleanup Trap ##############
#################################

function cleanup {
  local errno=$?

  # Make sure we clear the snapshot we created, even if we didn't succeed
  # uploading it to S3. Snaphots occupy a lot of disk space, and there is no
  # benefit in keeping them locally: if the instance (and it's ephemeral
  # storage) still exists, there is no reason to restore it from a snapshot.
  nodetool clearsnapshot -t "$sid" || true
  now=$(date +%s%3N)
  # nb. the date must be milliseconds since the epoch
  printf "$metrics_tmpl" $errno "$now" $errno $(((now-started_at)/1000)) "$now" > ${metrics_file}.$$ \
    && mv -v ${metrics_file}.$$ ${metrics_file} || true

  exit $errno
}
trap cleanup EXIT

#################################
##### Snapshot and Upload  ######
#################################

# Only occupy CPU #1
taskset -p 0x00000001 $$ > /dev/null 2>&1

# Clean _all_ old snapshots, just in case
nodetool clearsnapshot
# Create a new snapshot
nodetool snapshot -t "$sid"

# Poor man's retry function
function retry3 { $1 || $1 || $1; }
export -f retry3

# Upload to S3
for snapshot_subdir in $base/*/*/$snaps/$sid/; do
       snapshot_subdir_removed=${snapshot_subdir//$snaps\/$sid\/};
       key_name=$backup_base${snapshot_subdir_removed#$base}
       echo $bucket $key_name $snapshot_subdir;
done | xargs -n3 bash -c \
  'retry3 "aws s3 sync $3 s3://$1/$2 --no-guess-mime-type" || (echo Upload failed! && exit 255)' -

#################################
#### Mark remote as done  #######
#################################

# Stamp of approval
touch $empty_file
aws s3 cp "$empty_file" "$bucket/$backup_base/$done_msg"
